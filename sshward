#!/bin/bash

function mkd {
  while (($#)); do
    [[ -d $1 ]] || mkdir -p "$1"
    shift
  done
}
function mkdf {
  while (($#)); do
    [[ $1 = */* ]] && mkd "${1%/*}"
    shift
  done
}

function fileage {
  local now="$(date +%s)"
  local mtime="$(ls -ld --time-style=+%s "$1" 2>/dev/null | awk '{print $6;exit}')"
  echo $((now-mtime))
}

shell=bash
prefix=$HOME/.mwg/share/sshward
mkd "$prefix/tmp" "$prefix/log"

declare -a forward_options ssh_options
ssh_options=()
forward_options=(-n)

rhost=tkynt2

# heart beat time
htime=300

fTitle=
oTitle=
oHost=
oPidFile=
fServer=

# http://www.debianadmin.com/howto-use-ssh-local-and-remote-port-forwarding.html
#
# option -n : 何もしない
# option -R : remote port forwarding
# option -L : local port forwarding
# option -g : local port fowarding で他のマシンからも forward 元ポートを見える様にする場合に必要
#
# sshd_config GatewayPorts について
#   remote port forwarding の際に forward 元ポートが他のマシンからも見える様にする為には、
#   forward 元の /etc/ssh/sshd_config に GatewayPorts clientspecified または GatewayPorts yes を指定する必要がある。
#   clientspecified は -R bind_address:rport:localhost:lport の bind_address に指定された内容を使うことを表す。
#   GatewayPorts yes は全ての interface に bind する事を表す。
#

function read_arguments/error {
  echo "${0##*/} ($pos): $*" >&2
  fError=1
}

function read_arguments/option:H {
  if [[ $1 =~ ^[0-9]+$ ]]; then
    htime="$1"
  else
    if (($#==0)); then
      read_arguments/error "missing option argument."
    else
      read_arguments/error "invalid option argument \`$1'."
    fi
  fi
}

function read_arguments/option:help {
  local tvar='[36m' t0='[m'
  local tpat='[91m' bold='[1m'
  local OPTION="${tvar}OPTION${t0}"
  local FORWARD="${tvar}FORWARD${t0}"
  local svar="${tvar}@${t0}"
  ifold -i -s -w 80 <<EOF
usage: ${0##*/} ${tpat}[${t0}$OPTION${tpat}...]${t0} ${tvar}HOST${t0} ${tpat}[${t0}$FORWARD${tpat}...]${t0}

${bold}$OPTION

  --help
  -i ${svar/@/IdentityFile}
  -H ${svar/@/HeartbeatInterval}
  --title=${svar/@/TITLE}

  -Ws,${svar/@/SSHOPTIONS}
  -Wf,${svar/@/SSHOPTIONS}
    These options can be used to specify SSH options directly. \
The options with \`-Ws' will be used to create an ssh connection. \
The options with \`-Wf' will be used to make port fowardings. \
While the \`-Wf' options are used only in making port forwardings, \
the \`-Ws' options are used whenever ssh connections are needed, e.g. on installation of heartbeat scripts to the ${svar/@/HOST}.

${bold}$FORWARD

  ${tpat}[${t0}${tvar}RHOST${t0}:${tpat}]${t0}${tvar}RPORT${t0}>${tpat}[${t0}${tvar}LHOST${t0}:${tpat}]${t0}${tvar}LPORT${t0}
    Remort Port Forwarding

  ${tpat}[${t0}${tvar}RHOST${t0}:${tpat}]${t0}${tvar}RPORT${t0}<${tpat}[${t0}${tvar}LHOST${t0}:${tpat}]${t0}${tvar}LPORT${t0}
    Local Port Forwarding

${bold}Examples${t0}

  [user@laguerre ~]\$ sshward ftp-a.rcnp '50322>20002'
    create remote port forwarding ftp-a.rcnp:50322 to laguerre:20002.

  [user@yogo ~]\$ sshward ftp-a.rcnp '50422>22'
    create remote port forwarding ftp-a.rcnp:50422 to yogo:22.

EOF
  exit 0
}

function read_arguments {
  while (($#)); do
    local arg="$1" pos="command line argument \`$1'"
    shift
    case "$arg" in
    (-i)   ssh_options+=(-i "$1"); shift ;;
    (-i*)  ssh_options+=(-i "${arg:2}") ;;
    (-H)   read_arguments/option:H "$@"; shift ;;
    (-H*)  read_arguments/option:H "${arg:2}" ;;
    (-Wf,*) IFS=, eval 'forward_options+=(${arg%-Ws,})' ;;
    (-Ws,*) IFS=, eval 'ssh_options+=(${arg%-Ws,})' ;;
    (--server) fServer=1 ;;
    (--pidfile=*) oPidFile=${arg#*=} ;;
    (--help) read_arguments/option:help ;;
    (--title=*)
      fTitle=1 oTitle=${arg#*=} ;;
    (*'>'*)
      local rhost=${arg%%\>*}
      [[ $rhost != *:* ]] && rhost=*:$rhost
      local lhost=${arg#*\>}
      [[ $lhost != *:* ]] && lhost=localhost:$lhost
      forward_options+=(-R "$rhost:$lhost")
      [[ $fTitle ]] || oTitle+=" R($arg)" ;;
    (*'<'*)
      local rhost=${arg%%\<*}
      [[ $rhost != *:* ]] && rhost=localhost:$rhost
      local lhost=${arg#*\<}
      [[ $lhost != *:* ]] && lhost=*:$lhost
      forward_options+=(-L "$lhost:$rhost")
      [[ $fTitle ]] || oTitle+=" L($arg)" ;;
    (-*)
      read_arguments/error 'unrecognized option.' ;;
    (?*)
      if [[ ! $oHost ]]; then
        oHost=$arg
      else
        read_arguments/error 'multiple hosts are specified.'
      fi ;;
    (*)
      read_arguments/error 'unrecognized argument.' ;;
    esac
  done
}

read_arguments "$@"

if [[ ! $oHost ]]; then
  declare pos='command line'
  read_arguments/error 'no host is specified.'
fi

[[ $fError ]] && exit 1

#------------------------------------------------------------------------------

declare RemoteScript='$HOME/.mwg/share/sshward/heartbeat.v0.sh'
declare sshpid= fstdout=

function sshward/ssh {
  # - 標準出力の読み取り (fork せずに)。
  # - SIGTERM を伝播させる為に '&' して sshpid を記録してから wait する。
  local fstdout=$prefix/$$.ssh.stdout

  LANG=C ssh "${ssh_options[@]}" "${forward_options[@]}" "$oHost" "\"$RemoteScript\" $htime --from=$HOSTNAME" > "$fstdout" 2>&1 & sshpid=$!
  wait "$sshpid"
  local ret="$?"

  IFS= read -r -d '' stdout < "$fstdout"
  rm -f "$fstdout"
  sshpid= fstdout=
  return "$ret"
}

function sshward/terminate {
  [[ $sshpid ]] && kill "$sshpid"
  [[ -f $fstdout ]] && rm -f "$fstdout"
  sshpid= fstdout=

  if [[ $oPidFile ]]; then
    rm -f "$oPidFile"
    oPidFile=
  fi
}

function sshward/TRAPTERM {
  sshward/terminate
  exit 143
}

function sshward/start-heartbeat {
  local stdout
  if
    sshward/ssh
    [[ $? -eq 127 || $stdout =~ "/heartbeat.v0.sh: Command not found" ]]
  then
    sshward/log "installing scripts to remote host ($RemoteScript)."
    # 向こうにスクリプトが存在しなかった時に、インストールする
    ssh "${ssh_options[@]}" "$oHost" "mkdir -p \"${RemoteScript%/*}\" && cat >> \"$RemoteScript\" && chmod +x \"$RemoteScript\"" <<'EOF' && sshward/ssh
#!/bin/sh

# kill other
ps ax -o ppid,pid,user,command \
  | awk '$1=="1"&&$3=="'"$USER"'"&&$0~/\/\.mwg\/share\/sshward\/[h]eartbeat.v[0-9]+.sh\y|\ybash -c while :; do date; sleep [0-9]+; done$/{print "kill",$2;}' \
  | sh

htime="$1"

while :; do
  date
  sleep $htime
done
EOF
    return
  else
    test "$ret" -ne 0 && echo "ret=$ret"
    return "$ret"
  fi
}

function sshward/log {
  echo "[$(date +'%Y-%m-%d %H:%M:%S')] $*" >> "$prefix"/log/sshward.log
}

# Cooldown time on failure in unit of minutes
_sshward_cooldown_time=(
  1 1 1 3 5
)

function sshward/loop {
  trap -- sshward/TRAPTERM TERM INT QUIT
  if [[ $oPidFile ]]; then
    mkdf "$oPidFile"
    echo $BASHPID > "$oPidFile"
  fi

  nfail=0
  ftouch="$prefix"/tmp/sshward.$$.touch
  while :; do
    touch "$ftouch"
    sshward/log "try sshward $oTitle"
    sshward/start-heartbeat >> "$prefix"/log/sshward.err 2>&1

    jizoku=$(fileage "$ftouch")
    ((nfail=jizoku<300?nfail+1:0))
    sshward/log "failed jizoku=$jizoku (nfail=$nfail)"

    local sleep_min=${_sshward_cooldown_time[nfail]:-((nfail<30?nfail:30)-${#_sshward_cooldown_time[@]}+1)*10}
    sleep "$((60*sleep_min))"
  done &>/dev/null
}

if [[ $fServer ]]; then
  sshward/loop &>/dev/null </dev/null
else
  # fork & disown
  sshward/loop &>/dev/null </dev/null & disown
fi
